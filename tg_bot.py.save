import asyncio
import re


from aiogram import Bot, Dispatcher
from aiogram import types, executor, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from loguru import logger
from pathlib import Path
from datetime import datetime, timedelta

from conf import TG_TOKEN, ADMIN_IDS
from database import Database
from texts import Texts, MenuItem
from markups import Markups

from bf_texts import bf_sending, SendingData

class MyStates(StatesGroup):
    get_birthdate = State()
    get_sex = State()
    get_birthplace = State()
    admin_send_msgs = State()


bot = Bot(TG_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

db = Database()
daily_arhtypes = \
    [
        Path('photos/daily_arh_types/arh_type0.PNG'),
        Path('photos/daily_arh_types/arh_type1.PNG'),
        Path('photos/daily_arh_types/arh_type2.PNG'),
        Path('photos/daily_arh_types/arh_type3.PNG'),
        Path('photos/daily_arh_types/arh_type4.PNG')
    ]

@dp.message_handler(commands=['start'], state='*')
async def start_message(message: types.Message, state: FSMContext):
    await state.finish()
    if not db.check_if_user_exists(message.from_user.id):
        db.registrate_user(message.from_user.id)
    await message.answer(Texts.start_text, reply_markup=Markups.start_menu_mrkup)


@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state='*', commands=['admin'])
@logger.catch
async def admin_menu(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=Markups.admin_mrkup)


@dp.message_handler(lambda message: message.text == 'üëà–û–±—Ä–∞—Ç–Ω–æ', state='*')
async def back_to_start_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(Texts.start_text, reply_markup=Markups.start_menu_mrkup)


@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data.startswith('Admin'), state='*')
@logger.catch
async def admin_calls(call: types.CallbackQuery, state: FSMContext) -> None:
    action = '_'.join(call.data.split('_')[1:])
    if action == 'Users_Total':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {db.get_all_users_count()}',
                                     reply_markup=Markups.back_admin_mrkup)

    elif action == 'Users_For_TODAY':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {db.get_today_users_count()}',
                                     reply_markup=Markups.back_admin_mrkup)

    elif action == 'BACK':
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=Markups.admin_mrkup)

    elif action == 'Send_Messages':  # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ª—é–±—ã–º
        await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–ø–µ–Ω—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                     reply_markup=Markups.generate_send_msgs_step('any'))


def get_value_of_arg(arg: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç=–∑–Ω–∞—á–µ–Ω–∏–µ"""
    return arg.split('=')[-1]


@dp.callback_query_handler(lambda call: call.data.startswith('Sending?') and call.from_user.id in ADMIN_IDS, state='*')
@logger.catch
async def choose_step(call: types.CallbackQuery, state: FSMContext) -> None:
    # Sending?Step={step_num}&type={sending_type}
    step, sending_type = [get_value_of_arg(arg) for arg in call.data.split('?')[1].split('&')]

    type_text = {'any': '–ª—é–±—ã–º –∏–∑ —Å—Ç—É–ø–µ–Ω–∏', 'special': '—Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ –ø–µ—Ä–µ—à—ë–ª –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'}[sending_type]
    step_text = {'ALL': '–≤—Å–µ–º', '0': '–ø–µ—Ä–≤–∞—è', '1': '–≤—Ç–æ—Ä–æ–∞—è', '2': '—Ç—Ä–µ—Ç—å—è', '3': '—á–µ—Ç–≤—ë—Ä—Ç–∞—è'}[step]
    await call.message.edit_text(f'–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: {type_text}\n–°—Ç—É–ø–µ–Ω—å: {step_text}\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
                                 f'{db.get_count_users_with_step(step) if step != "ALL" else db.get_count_all_users()} '
                                 f'(–≤—Å–µ —Å –¥–∞–Ω–Ω–æ–π —Å—Ç—É–ø–µ–Ω—å—é, –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞)\n'
                                 f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                 reply_markup=Markups.back_admin_mrkup)
    await state.set_data({'step': step, 'sending_type': sending_type})
    await state.set_state(MyStates.admin_send_msgs.state)


@dp.callback_query_handler(state=MyStates.admin_send_msgs)
async def cancel_getting(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if call.data == 'Cancel_Getting_Msg_For_Sending':
        await call.message.edit_text(text='–í—ã–±–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω!', reply_markup=Markups.back_admin_mrkup)


@dp.message_handler(state=MyStates.admin_send_msgs)
@logger.catch
async def get_message_to_send(message: types.Message, state: FSMContext):
    state_data = (await state.get_data())
    step = state_data.get('step')
    sending_type = state_data.get('sending_type')
    await state.finish()
    try:
        assert step is not None and sending_type is not None
        if step == 'ALL':
            to_who_to_send = [int(user[0]) for user in db.get_all_users()]
        else:
            to_who_to_send = [int(user[0]) for user in db.get_users_with_step(int(step))]
    except AssertionError:
        await bot.send_message(message.chat.id,
                               '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å—Å—ã–ª–∞—Ç—å.',
                               reply_markup=Markups.back_admin_mrkup)
    else:
        asyncio.create_task(sending_to_people(message.text, to_who_to_send, sending_type, message.chat.id))


@logger.catch
async def sending_to_people(text: str, users: list[int], sending_type: str, admin_chat) -> None:
    length_users = len(users)
    msg_for_admin = await bot.send_message(admin_chat, f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å 0/{length_users}')
    message_id_to_edit = msg_for_admin.message_id
    chat_id_where_edit = msg_for_admin.chat.id
    main_counter = 0
    for enum_user, user in enumerate(users, start=1):
        try:
            if enum_user % 10 == 0:
                await bot.edit_message_text(text=f'–†–∞—Å—Å—ã–ª–∫–∞ {enum_user}/{length_users}',
                                            chat_id=chat_id_where_edit, message_id=message_id_to_edit)
            await bot.send_message(user, text)
            db.update_step(user)
            logger.info(f'Updated {user} step+=1')
            await asyncio.sleep(0.1)
            main_counter += 1
        except exceptions.BotBlocked:
            logger.info(f'{user} –∑–∞–±–ª–æ—á–∏–ª –±–æ—Ç–∞. –£–¥–∞–ª—ë–Ω –∏–∑ –ë–î')
        except Exception as ex:
            logger.error(f'Got error when tried to send to {user}. Error is {ex}')
    await bot.send_message(chat_id_where_edit, f'–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {length_users}\n'
                                               f'–ü–æ–ª—É—á–∏–ª–∏: {main_counter}\n–ù–µ –ø–æ–ª—É—á–∏–ª–∏: {length_users - main_counter}')


async def answer_menu_item(message: types.Message, menu_item: MenuItem):
    text_to_send = None
    if menu_item.text and len(menu_item.text) > 1024:
        text_to_send = menu_item.text
        menu_item.text = None

    if isinstance(menu_item.photo, Path):
        with menu_item.photo.open('rb') as item_photo:
            msg = await message.answer_photo(item_photo, caption=menu_item.text, reply_markup=Markups.to_menu_markup)
        menu_item.photo = msg.photo[-1].file_id
    else:
        await message.answer_photo(menu_item.photo, caption=menu_item.text, reply_markup=Markups.to_menu_markup)
    if text_to_send:
        await message.answer(text_to_send, reply_markup=Markups.to_menu_markup)


@dp.message_handler(lambda message: message.text in Markups.titles_start_menu_mrkup, state='*')
async def start_menu(message: types.Message, state: FSMContext):
    if message.text == 'üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª':
        await message.answer(Texts.info_menu_text, reply_markup=Markups.info_menu_mrkup)
    elif message.text == 'üëÄ–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø':
        await answer_menu_item(message, Texts.calculate_arh_type_item)
        user_date = db.get_user_birthdate(message.from_user.id)
        if True or user_date is None:  # TODO: —É–±—Ä–∞—Ç—å True
            await state.set_state(MyStates.get_birthdate.state)
    elif message.text == 'üéÅ–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫':
        await message.answer(Texts.daily_bonus_menu_text, reply_markup=Markups.daily_bonus_mrkup)


@dp.message_handler(lambda message: message.text in Texts.info_items, state="*")
async def info_menu_answer(message: types.Message, state: FSMContext):
    info_item = Texts.info_items[message.text]
    await answer_menu_item(message, info_item)


@dp.message_handler(lambda message: message.text in Markups.titles_daily_bonus, state='*')
async def calls_from_daily_bonus_menu(message: types.Message, state: FSMContext):
    if message.text in Texts.dict_check_lists:
        check_list = Texts.dict_check_lists[message.text]
        if isinstance(check_list.file, Path):
            with check_list.file.open('rb') as check_list_file:
                bot_msg = await message.answer_document(check_list_file, caption=check_list.text, reply_markup=Markups.to_menu_markup)
            check_list.file = bot_msg.document.file_id
        else:
            await message.answer_document(check_list.file, caption=check_list.text, reply_markup=Markups.to_menu_markup)

    elif message.text == 'üí´–£–∑–Ω–∞—Ç—å –∞—Ä—Ö–µ—Ç–∏–ø –¥–Ω—è':
        step = db.get_daily_arh_step(message.from_user.id)  # 0 to 4
        await message.answer(Texts.daily_arch_types[step], reply_markup=Markups.to_menu_markup)

    elif message.text == 'üìö –ü–æ–¥–±–æ—Ä–∫–∞ –∫–Ω–∏–≥ –æ–± –∞—Ä—Ö–µ—Ç–∏–ø–∞—Ö':
        await answer_menu_item(message, Texts.books_recommendation)

    elif message.text == 'üî•–ê—Ä—Ö–µ—Ç–∏–ø –¥–Ω—è':
        await send_daily_arhtype(message.from_user.id)


async def send_daily_arhtype(user_id):
    user_step = db.get_daily_arh_step(user_id)
    daily_arh_type_photo = daily_arhtypes[int(user_step)]
    now_time = datetime.now()
    tomorrow_time = (now_time + timedelta(days=1))
    necessary_time = datetime(year=tomorrow_time.year, month=tomorrow_time.month, day=tomorrow_time.day, hour=0, minute=0, second=0)
    seconds_left = (necessary_time - now_time).total_seconds()
    hours_left = round(seconds_left / 60 // 60)
    minutes_left = round(seconds_left // 60 % 60)
    text = f"‚è≥–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–µ—Ç–∏–ø–∞ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {hours_left} —á–∞—Å–∞ {minutes_left} –º–∏–Ω—É—Ç(—ã)."

    if isinstance(daily_arh_type_photo, str):
        await bot.send_photo(user_id, photo=daily_arh_type_photo, caption=text, reply_markup=Markups.to_menu_markup)
    else:
        with daily_arh_type_photo.open("rb") as f:
            msg = await bot.send_photo(user_id, photo=f, caption=text, reply_markup=Markups.to_menu_markup)
            daily_arhtypes[user_step] = msg.photo[-1].file_id


async def send_arh_type(user_id: int, birthdate: str):
    # month = int(birthdate.split('.')[1])-1
    # arch_type = Texts.arch_types[month]
    main_text = '–£ –≤–∞—Å —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞—Ä—Ö–µ—Ç–∏–ø "–ú–∞–≥". –≠—Ç–æ –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π. –°–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã –º–µ–Ω—è—Ç—å –∫–∞–∫ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∏ –∂–∏–∑–Ω–∏ –ª—é–¥–µ–π –≤–æ–∫—Ä—É–≥ –≤–∞—Å. –í—ã –Ω–∞ –≥–ª—É–±–∏–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É —Å–ø–æ—Å–æ–±–Ω—ã –æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –≤–ª–∏—è–Ω–∏–µ. \n\n–°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –£ –º–∞–≥–æ–≤ —á–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –º–µ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —Å—á–∏—Ç–∞—é—Ç –Ω–µ—Å–±—ã—Ç–æ—á–Ω—ã–º–∏, –Ω–æ —Å—É—Ç—å –º–∞–≥–∏–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–±–ª–∞–¥–∞—Ç—å –≤–∏–¥–µ–Ω–∏–µ–º –∏ —É–º–µ—Ç—å –ø—Ä–µ—Ç–≤–æ—Ä–∏—Ç—å —ç—Ç–æ –≤–∏–¥–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω—å.\n\n–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: –¢–µ–Ω–µ–≤–æ–π –ú–∞–≥ ‚Äî —ç—Ç–æ –µ—â–µ –∏ —á–∞—Å—Ç—å –Ω–∞—Å, —Å–ø–æ—Å–æ–±–Ω–∞—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å–¥–µ–ª–∞—Ç—å —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –±–æ–ª—å–Ω—ã–º–∏.\n\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ú–∞–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—ã–±–æ—Ä ‚Äî –ª–∏–±–æ –æ–Ω –∏–º–µ–µ—Ç –¥–µ–ª–æ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é, –æ—Å–≤–∞–∏–≤–∞—è –≤—Å–µ –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π, –ª–∏–±–æ –æ–Ω –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –∏–ª–ª—é–∑–æ—Ä–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å —É–≥—Ä–æ–∑ –∏ –∑–∞–¥–∞—á –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∏—Ä–∞. –ú–∞–≥—É –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ–º –º–∏—Ä–µ, –∏–Ω–∞—á–µ –æ–Ω –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å–µ–±—è –∏ –æ—Ç –≤—Å–µ—Ö((\n\n–£ —á–µ–ª–æ–≤–µ–∫–∞, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏ 3 –≤ –ø–∞—Å—Å–∏–≤–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–±—É–¥–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏. –û–± –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–≤–æ–∏—Ö –∞—Ä–µ—Ç–∏–ø–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É —ç–∫—Å–ø–µ—Ä—Ç–∞.'
    await bot.send_message(user_id, main_text)
    late_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–µ–π –º–µ—Ç–æ–¥–∏–∫–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è! üí´\n\n\n‚úíÔ∏è–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —è –≥–æ—Ç–æ–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –í–∞—à –∞—Ä—Ö–µ—Ç–∏–ø. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî @ArhetypeMentor\n\n<b>‚ÄºÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ‚ÄºÔ∏è</b>"
    await asyncio.create_task(send_late_thanks(user_id, late_text))


async def send_late_thanks(user_id: int, text: str):
    if not db.check_if_push_set(user_id):
        db.set_or_unset_push(user_id, 1)
        await asyncio.sleep(2)  # TODO: 133
        await bot.send_message(user_id, text, parse_mode='html', reply_markup=Markups.to_our_account_mrkup)
        db.set_or_unset_push(user_id, 0)


@dp.message_handler(state=MyStates.get_birthdate)
async def get_user_birthdate(message: types.Message, state: FSMContext):
    if re.fullmatch(r'\d{1,2}\.\d{1,2}\.\d{4}', message.text):
        day, month, year = message.text.split('.')
        if 0 < int(day) < 32 and 0 < int(month) < 13 and int(year) < 2023:
            db.registrate_user_birthdate(message.from_user.id, message.text)
            await state.set_state(MyStates.get_sex.state)
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –ø–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú\–ñ‚¨áÔ∏è", reply_markup=Markups.sex_mrkup)
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.\n'
                                 'üôè–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ –¥–¥.–º–º.–≥–≥–≥–≥',
                                 reply_markup=Markups.to_menu_markup)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n'
                             'üôè–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ –¥–¥.–º–º.–≥–≥–≥–≥',
                             reply_markup=Markups.to_menu_markup)


@dp.message_handler(lambda message: message.text in ('–ú', '–ñ'), state=MyStates.get_sex)
async def get_user_sex(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ä–æ–¥–∏–ª–∏—Å—å‚¨áÔ∏è', reply_markup=Markups.to_menu_markup)
    await state.set_state(MyStates.get_birthplace.state)


@dp.message_handler(state=MyStates.get_birthplace)
async def get_user_birth_place(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä"""
    if len(message.text) > 512:  # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ë–î, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –≤ 512
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–æ—á–µ.")
    else:
        db.update_user_birth_place(message.from_user.id, message.text)
        await state.finish()
        await message.answer('ü™Ñ–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...', reply_markup=Markups.to_menu_markup)
        await asyncio.sleep(0.5)  # TODO: 3.5
        asyncio.create_task(send_arh_type(message.chat.id, db.get_user_birthdate(message.from_user.id)))


async def update_db_advices_step_func():
    db.update_daily_arh_step()


async def sending_messages_2h():
    while True:
        await asyncio.sleep(7)
        text_for_2h_autosending = f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —É –º–µ–Ω—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –í–∞—à–µ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞üí´\n\n–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –í–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç, –∞ —Ç–∞–∫–∂–µ –∏—Ö —Ä–µ—à–µ–Ω–∏–µüôåüèª"
        users_for_2h_autosending = db.get_users_2h_autosending()
        for user in users_for_2h_autosending:
            try:
                await bot.send_message(user, text_for_2h_autosending,
                                       reply_markup=Markups.to_our_account_mrkup)
                logger.info(f'ID: {user}. Got 2h_autosending')
                db.mark_got_2h_autosending(user)
                await asyncio.sleep(0.07)
            except exceptions.BotBlocked:
                logger.exception(f'ID: {user}. DELETED')
                db.delete_user(user)
            except exceptions.UserDeactivated:
                logger.exception(f'ID: {user}. DELETED')
                db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')


async def sending_messages_24h():
    while True:
        await asyncio.sleep(7)
        text_for_24h_autosending = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—á–µ—Ä–∞ –¥—É–º–∞–ª–∞ –æ –í–∞—Å, —É –º–µ–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å –æ–¥–Ω–æ –º–µ—Å—Ç–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –í–∞—à–µ–π —Å—É–¥—å–±—ãü§≤üèª –•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ –í–∞–º, –≤–µ–¥—å —Å–µ–π—á–∞—Å –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è —Å–∞–º—ã–µ –º–æ—â–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏ –¥–Ω–∏ –≤ –≥–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç–µ—á–∫–∏ üíì"
        users_for_24h_autosending = db.get_users_24h_autosending()
        for user in users_for_24h_autosending:
            try:
                await bot.send_message(user, text_for_24h_autosending,
                                       reply_markup=Markups.to_our_account_mrkup)
                logger.info(f'ID: {user}. Got 24h_autosending')
                db.mark_got_24h_autosending(user)
                await asyncio.sleep(0.07)
            except exceptions.BotBlocked:
                logger.exception(f'ID: {user}. DELETED')
                db.delete_user(user)
            except exceptions.UserDeactivated:
                logger.exception(f'ID: {user}. DELETED')
                db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')


async def sending_messages_48h():
    while True:
        await asyncio.sleep(7)
        text_for_48h_autosending = f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥—É–º–∞–ª–∏ –Ω–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞?\n\n–°–µ–π—á–∞—Å –µ—Å—Ç—å –±–æ–ª—å—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å –í–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —á—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –≤–æ–π—Ç–∏ –≤ —Ü–∏–∫–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –ª–µ—ÇüçÄüçÄ"
        users_for_48h_autosending = db.get_users_48h_autosending()
        for user in users_for_48h_autosending:
            try:
                await bot.send_message(user, text_for_48h_autosending,
                                       reply_markup=Markups.to_our_account_mrkup)
                logger.info(f'ID: {user}. Got 48h_autosending')
                db.mark_got_48h_autosending(user)
                await asyncio.sleep(0.07)
            except exceptions.BotBlocked:
                logger.exception(f'ID: {user}. DELETED')
                db.delete_user(user)
            except exceptions.UserDeactivated:
                logger.exception(f'ID: {user}. DELETED')
                db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')




async def on_startup(_):
    asyncio.create_task(sending_messages_2h())
    asyncio.create_task(sending_messages_24h())
    asyncio.create_task(sending_messages_48h())


def main():
    scheduler = AsyncIOScheduler({'apscheduler.timezone': 'Europe/Moscow'})
    scheduler.add_job(trigger='cron', hour='00', minute='00', func=update_db_advices_step_func)
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)


main()
